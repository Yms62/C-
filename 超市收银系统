#include <stdio.h>
#include <string.h>
#include <time.h>

#define M 100
#define P 20

struct item//记录购买的每一项商品信息
{
	char goods_no[5]; // 货物编号
	char goods_name[50]; //商品名称
	float unit; //商品单价
	int num; //购买数量
	float amount; //单项金额
};

struct commodity//记录商品信息
{
	char goods_no[5]; //商品编号
	char goods_name[50]; //商品名称
	float unit; //单价
	int stock; //库存量
	int total; //销量
};

//struct tm
//{
//	int tm_sec; /* 秒，范围从 0 到 59 */
//	int tm_min; /* 分，范围从 0 到 59 */
//	int tm_hour; /* 小时，范围从 0 到 23 */
//	int tm_mday; /* 一月中的第几天，范围从 1 到 31 */
//	int tm_mon; /* 月，范围从 0 到 11 */
//	int tm_year; /* 自 1900 年起的年数 */
//	int tm_wday; /* 一周中的第几天，范围从 0 到 6 */
//	int tm_yday; /* 一年中的第几天，范围从 0 到 365 */
//	int tm_isdst; /* 夏令时 */
//};

struct order//记录订单信息
{
	char order_no[15]; //订单号由年+月+日+时+分+秒自动生成
	struct item items[P];//购买的商品明细，保存在数组中，P是一个符号常量
	int n; //每个订单的商品数，即每份订单的items[]数组中的实际元素个数
	float total; //每份订单总金额
};

void time_switch(struct order orders[], int m)
{
	struct tm* p;
	time_t timer;
	int k;
	int i;
	char ch[15] = { '\0' };
	orders[m].order_no[14] = '\0';
	timer = time(NULL);
	p = localtime(&timer);
	k = (*p).tm_sec;
	for (i = 13; i >= 12; i--)
	{
		ch[i] = k % 10+48;
		k /= 10;
	}
	k = (*p).tm_min;
	for (i = 11; i >= 10; i--)
	{
		ch[i] = k % 10 + 48;
		k /= 10;
	}
	k = (*p).tm_hour;
	for (i = 9; i >= 8; i--)
	{
		ch[i] = k % 10 + 48;
		k /= 10;
	}
	k = (*p).tm_mday;
	for (i = 7; i >= 6; i--)
	{
		ch[i] = k % 10 + 48;
		k /= 10;
	}
	k = (*p).tm_mon + 1;
	for (i = 5; i >= 4; i--)
	{
		ch[i] = k % 10 + 48;
		k /= 10;
	}
	k = (*p).tm_year + 1900;
	for (i = 3; i >= 0; i--)
	{
		ch[i] = k % 10 + 48;
		k /= 10;
	}
	strcpy(orders[m].order_no, ch);
}

void sort_by_goods_total(struct commodity goods[], int n)//按商品销量将商品信息从高到底排序
{
	struct commodity k;//中间变量
	int i, j;
	for (i = 0; i < n; i++)
	{
		for (j = i; j < n; j++)
		{
			if (goods[j].total > goods[i].total)
			{
				k = goods[i];
				goods[i] = goods[j];
				goods[j] = k;
			}
		}
	}
}

void print_goods(const struct commodity goods[], const int n)//打印商品清单
{
	int i;
	printf("\n	编号	商品名称	单价（元）	库存	销量\n");
	for (i = 0; i < n; i++)
		printf("	%5s %11s	%8.2f       %4d	%3d\n", goods[i].goods_no, goods[i].goods_name, goods[i].unit, goods[i].stock, goods[i].total);
}

int read_goods(struct commodity goods[])//读取商品信息
{
	const FILE* fp;
	int i;
	fp = fopen("goods.txt", "r");
	if (fp == NULL)
	{
		printf("文件打开错误");
		return 0;
	}
	for (i = 0; !feof(fp); i++)
	{
		fscanf(fp,"%s%s%f%d", goods[i].goods_no, goods[i].goods_name, &goods[i].unit, &goods[i].stock);
		goods[i].total = 0;
	}
	fclose(fp);
	return i;
}

void goods_sum(struct commodity goods[], int n, struct order orders[], int m)//计算商品销量
{
	int i, j;
	for (i = 0; i < m; i++)
	{
		for (j = 0; j < orders[i].n; j++)
		{
			goods[orders[i].items[j].goods_no[3]-49].total += orders[i].items[j].num;
		}
	}
}

int buy(struct order orders[], int m, struct commodity goods[], int n)//收银结算
{
	char goods_no[5];
	int num, i, k;
	char confirm;
	while (1) //外循环用于循环不同顾客
	{
		orders[m].n = 0;//用于items[]计数
		orders[m].total = 0; //total统计一个顾客购买的总金额
		i = 0; //i记录一个顾客购买的商品数
		while (1) //内循环用于一个顾客购买结算多种商品
		{
			printf("请输入购买的商品编号，输入0结束输入：");
			scanf("%s", goods_no);
			if (strcmp(goods_no, "0") == 0) break;
			for (k = 0; k < 5; k++) //查找商品编号在goods[]中的下标
			{
				if (strcmp(goods_no, goods[k].goods_no) == 0)
				{
					strcpy(orders[m].items[orders[m].n].goods_no , goods[k].goods_no);
					strcpy(orders[m].items[orders[m].n].goods_name, goods[k].goods_name);
					orders[m].items[orders[m].n].unit = goods[k].unit;
					break;
				}
			}
			if (k >= 5)
			{
				printf("商品编号错!\n");
				continue;
			}
			printf("商品名：%s, 单价：%.2f元\n",
				goods[k].goods_name, goods[k].unit);
			printf("请输入购买的商品数量：");
			scanf("%d", &num);
			if (num <= 0)
			{
				printf("商品数量错!\n");
				continue;
			}
			else
			{
				if (num > goods[k].stock)//判断库存是否足够
				{
					printf("商品库存不足!\n");
					continue;
				}
				orders[m].items[orders[m].n].num = num;//购买数量
				orders[m].items[orders[m].n].amount = num * goods[k].unit;
				goods[k].stock -= num;
			}
			orders[m].total += orders[m].items[orders[m].n].amount;
			orders[m].n++;
			i++;
		}
		time_switch(orders, m);
		printf("您的订单号为 %5s，您共购买了%5d 种商品，购买总金额%5.2f元", orders[m].order_no, i, orders[m].total);
		m++;
		getchar();
		fflush(stdin); //清空键盘缓冲区
		printf("\n继续结算下一位顾客？【按回车继续，其他键结束】");
		confirm = getchar();
		if (confirm != '\n')
			break;
	}
	return m;
}

void print_order(struct order orders[], int m, struct commodity goods[],int n)//输出顾客的所有购买记录
{
	int i, j;
	int k = 0;
	float total = 0;
	for (i = 0; i < m; i++)
	{
		printf("\n   订单号：%s		总金额：	%.2f元\n", orders[i].order_no, orders[i].total);
		printf("订单明细：\n");
		printf("	商品编号	商品名称	单价（元）	数量	金额（元）\n");
		for (j = 0; j < orders[i].n; j++)
		{
			printf("	%8s%16s     %9.2f		%2d	%.2f\n",orders[i].items[j].goods_no,orders[i].items[j].goods_name, orders[i].items[j].unit, orders[i].items[j].num, orders[i].items[j].amount);
		}
	}
}

void menu()
{
	printf("	------------------\n");
	printf("	1--收银结账       \n");
	printf("	2--输出订单信息   \n");
	printf("	3--输出商品信息   \n");
	printf("	4--商品销量统计   \n");
	printf("	5--商品销量排序   \n");
	printf("	0--退出系统       \n");
	printf("	------------------\n");
	printf("	请输入您的选择：");
}

int main(void)
{
	int choice = 1;
	struct commodity goods[5];
	struct order orders[M]; 
	int m = 0;//orders[]中已有的元素个数
	int n;//记录goods之中货物种类
	n = read_goods(goods);
	if (n != 0)
	{
		while (choice)
		{
			//菜单
			menu();
			scanf("%d", &choice);
			switch (choice)
			{
			case 1:
				//收银结账
				m = buy(orders, m, goods, n);
				break;
			case 2:
				//输出订单信息
				printf("顾客订单如下：\n");
				print_order(orders, m, goods, n);
				break;
			case 3:
				//输出商品信息
				print_goods(goods, n);
				break;
			case 4:
				//商品销量统计
				goods_sum(goods, n, orders, m);
				printf("\n商品销量已统计\n");
				break;
			case 5:
				//商品销量排序
				sort_by_goods_total(goods, n);
				printf("\n商品销量已排序\n");
				break;
			case 0:
				//退出
				printf("再见!\n");
				break;
			default:
				printf("输入错误\n");
				break;
			}
		}
	}
	return 0;
}
